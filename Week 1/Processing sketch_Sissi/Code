// My concept is to create a particle system that could bring satisfying to the viewer.
// When you start to run the file, each pixel(rect) will begin moving around and as the
// times goes the pattern will stop to a random wallpaper, my next step is to make
// each pixel change throughout the time and form a digital clock on the page.

float S = 0.001; // move speed

int rowH = 30; // horizontal rows, number

int rowV = 20; // vertical rows, number

int rowHStep, rowVStep; // movement each row make

ArrayList<Rect> rects; // array each rects

void setup() {

  size(1200, 700);

  noStroke();

  rowHStep = width / rowH;

  rowVStep = height / rowV;

  rects = new ArrayList(); // new array

  for (int i = 0 ; i < rowH ; i++) {

    for (int j = 0 ; j < rowV ; j++) {

      Rect temp = new Rect(i*rowHStep, j*rowVStep);

      rects.add(temp); //add a new temp

    }

  }

}

void draw() {

  background(0);

  for (int i = 0 ; i < rects.size() ; i++) {

    Rect temp = rects.get(i);

    temp.update();

    if (temp.x == temp.tx && temp.y == temp.ty && random(1) < S) {

      int offsetX = floor(random(-0.99, 1.99)); // floor to map the different time of the movement.

      int offsetY = floor(random(-0.99, 1.99));

      temp.tx += offsetX * rowHStep;

      temp.ty += offsetY * rowVStep;

    }

  }
}

class Rect {

  float x, y;

  float tx, ty;

  float easing = 0.1;

  public Rect(float x, float y) {

    this.x = x;

    this.y = y;

    tx = x;

    ty = y;

  }

  public void update() {

    if (tx != x || ty != y) {

      x += (tx - x)*easing;

      y += (ty - y)*easing;

    }

    fill(255, 255, 140, 50);

    rect(x, y, 10, 10);

  }

}
